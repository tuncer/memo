Contributing to memo
--------------------

Before implementing a new feature, please submit a ticket to discuss your
plans. The feature might have been rejected already, or the implementation
might already be decided.

Code style
----------

The following rules must be followed:
 * Do not introduce trailing whitespace
 * Do not mix spaces and tabs
 * Do not introduce lines longer than 80 characters

The following rules should be followed:
 * Write small functions whenever possible
 * Avoid having too many clauses containing clauses containing clauses.
   Basically, avoid deeply nested functions.

erlang-mode (http://www.erlang.org/doc/man/erlang.el.html) indentation is
preferred. This will keep the code base consistent. vi users are encouraged to
give http://emacswiki.org/emacs/Evil a try.

Pull requests and branching
---------------------------

Use one topic branch per pull request. If you do that, you can add extra
commits or fix up  buggy commits via 'git rebase -i', and update the branch.
The updated branch will be  visible in the same pull request. Therefore, you
should not open a new pull request when  you have to fix your changes.

Do not commit to master in your fork.

Provide a clean branch without merge commits.

Tests
-----

As a general rule, any behavioral change to memo requires a test to go with it.

Credit
------

To give everyone proper credit in addition to the git history, please append
your name in the "Credits" section in AUTHORS as part of your first ever
commit.

Committing your changes
-----------------------

Please ensure that all commits pass all tests, and do not have extra Dialyzer
warnings. To do that, first build the PLT by running 'rebar build-plt'. Then
run 'rebar compile ct dialyze' to (1) compile, (2) run tests, and (3) dialyze
the code.

By using abbreviated commands, you can also (0) build-plt, (1) compile,
(2) ct (test), and (3) dialyze the code like this:

$ rebar b-p
$ rebar co ct di

This is shorter to type. See 'rebar help' for a description of
abbreviated command support.

== Structuring your commits

Fixing a bug is one commit.
Adding a feature is one commit.
Adding two features is two commits.
Two unrelated changes is two commits.

If you fix a (buggy) commit, squash (git rebase -i) the changes as a fixup
commit into the original commit.

== Writing Commit Messages

It's important to write a proper commit title and description. The commit title
must be at most 50 characters; it is the first line of the commit text. The
second line of the commit text must be left blank. The third line and beyond is
the commit message. You should write a commit message. If you do, wrap all
lines at 72 characters. You should explain what the commit does, what
references you used, and any other information that helps understanding your
changes.

Basically, structure your commit message like this:

One line summary (at most 50 characters)
<blank line>
Longer description (wrap at 72 characters)

== Commit title/summary

* At most 50 characters
* What was changed
* Imperative present tense (Fix, Add, Change)
 * Fix bug 123
 * Add 'foobar' command
 * Change default timeout to 123
* No period

== Commit description

* Wrap at 72 characters
* Why, explain intention and implementation approach
* Present tense
